plugins {
    id 'java'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'org.slf4j:slf4j-api:2.0.10'
    testImplementation 'org.slf4j:slf4j-simple:2.0.10'
    runtimeOnly 'org.slf4j:slf4j-simple:2.0.10'

    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'

    implementation 'org.java-websocket:Java-WebSocket:1.5.3'

    implementation 'com.google.code.gson:gson:2.10.1'

    implementation 'de.javawi.jstun:jstun:0.7.4'

    implementation 'at.favre.lib:bcrypt:0.10.2'

}

task createMainJar(type: Jar) {
    archiveBaseName.set('main-app')
    from sourceSets.main.output
    manifest {
        attributes(
                'Main-Class': 'okp.nic.Main',
                'Encoding': 'UTF-8'
        )
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task createSignalServerJar(type: Jar) {
    archiveBaseName.set('signalserver-app')
    from sourceSets.main.output
    manifest {
        attributes(
                'Main-Class': 'okp.nic.network.signal.SignalServer',
                'Encoding': 'UTF-8'
        )
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

build.dependsOn createMainJar, createSignalServerJar

test {
    useJUnitPlatform()
}